<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tencent.supersonic.chat.persistence.mapper.ChatQueryDOMapper">
  <resultMap id="BaseResultMap" type="com.tencent.supersonic.chat.persistence.dataobject.ChatQueryDO">
    <id column="question_id" jdbcType="BIGINT" property="questionId" />
    <result column="agent_id" jdbcType="INTEGER" property="agentId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="query_state" jdbcType="INTEGER" property="queryState" />
    <result column="chat_id" jdbcType="BIGINT" property="chatId" />
    <result column="score" jdbcType="INTEGER" property="score" />
    <result column="feedback" jdbcType="VARCHAR" property="feedback" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.tencent.supersonic.chat.persistence.dataobject.ChatQueryDO">
    <result column="query_text" jdbcType="LONGVARCHAR" property="queryText" />
    <result column="query_result" jdbcType="LONGVARCHAR" property="queryResult" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    question_id, agent_id, create_time, user_name, query_state, chat_id, score, feedback
  </sql>
  <sql id="Blob_Column_List">
    query_text, query_result
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.tencent.supersonic.chat.persistence.dataobject.ChatQueryDOExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from s2_chat_query
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>


  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from s2_chat_query
    where question_id = #{questionId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.tencent.supersonic.chat.persistence.dataobject.ChatQueryDO" useGeneratedKeys="true" keyProperty="questionId">
    insert into s2_chat_query (agent_id, create_time, user_name,
      query_state, chat_id, score,
      feedback, query_text, query_result
      )
    values (#{agentId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{userName,jdbcType=VARCHAR},
      #{queryState,jdbcType=INTEGER}, #{chatId,jdbcType=BIGINT}, #{score,jdbcType=INTEGER},
      #{feedback,jdbcType=VARCHAR}, #{queryText,jdbcType=LONGVARCHAR}, #{queryResult,jdbcType=LONGVARCHAR}
      )
  </insert>

  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.tencent.supersonic.chat.persistence.dataobject.ChatQueryDO">
    update s2_chat_query
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="queryState != null">
        query_state = #{queryState,jdbcType=INTEGER},
      </if>
      <if test="chatId != null">
        chat_id = #{chatId,jdbcType=BIGINT},
      </if>
      <if test="score != null">
        score = #{score,jdbcType=INTEGER},
      </if>
      <if test="feedback != null">
        feedback = #{feedback,jdbcType=VARCHAR},
      </if>
      <if test="queryText != null">
        query_text = #{queryText,jdbcType=LONGVARCHAR},
      </if>
      <if test="queryResult != null">
        query_result = #{queryResult,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where question_id = #{questionId,jdbcType=BIGINT}
  </update>
</mapper>
